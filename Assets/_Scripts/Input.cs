//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game
{
    public partial class @InputHandler: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputHandler()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""GameInput"",
            ""id"": ""dac1feb5-dbdf-4909-b4b6-dd19d22f0d78"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""4bf0217e-674f-49f0-9079-abf9660ca24b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c0ed58a-3ad5-471b-88b3-e1fea09bcc6e"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GameInput
            m_GameInput = asset.FindActionMap("GameInput", throwIfNotFound: true);
            m_GameInput_Click = m_GameInput.FindAction("Click", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameInput
        private readonly InputActionMap m_GameInput;
        private List<IGameInputActions> m_GameInputActionsCallbackInterfaces = new List<IGameInputActions>();
        private readonly InputAction m_GameInput_Click;
        public struct GameInputActions
        {
            private @InputHandler m_Wrapper;
            public GameInputActions(@InputHandler wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_GameInput_Click;
            public InputActionMap Get() { return m_Wrapper.m_GameInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameInputActions set) { return set.Get(); }
            public void AddCallbacks(IGameInputActions instance)
            {
                if (instance == null || m_Wrapper.m_GameInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameInputActionsCallbackInterfaces.Add(instance);
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }

            private void UnregisterCallbacks(IGameInputActions instance)
            {
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
            }

            public void RemoveCallbacks(IGameInputActions instance)
            {
                if (m_Wrapper.m_GameInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameInputActions instance)
            {
                foreach (var item in m_Wrapper.m_GameInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameInputActions @GameInput => new GameInputActions(this);
        public interface IGameInputActions
        {
            void OnClick(InputAction.CallbackContext context);
        }
    }
}
